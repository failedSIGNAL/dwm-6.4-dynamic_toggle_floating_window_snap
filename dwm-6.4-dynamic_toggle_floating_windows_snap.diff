diff -up ../dwm-6.4/config.def.h ./config.def.h
--- ../dwm-6.4/config.def.h	2022-10-04 10:38:18.000000000 -0700
+++ ./config.def.h	2023-01-29 19:33:38.341024498 -0800
@@ -3,6 +3,7 @@
 /* appearance */
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
+static const int float_snap			= 50		
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char *fonts[]          = { "monospace:size=10" };
@@ -21,14 +22,26 @@ static const char *colors[][3]      = {
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
+/* Toggle-able floating window commands */
+static const char *boxcmd[] = {"st", "-t", "instabox", NULL };
+static const char *firefoxcmd[] = {"firefox", NULL };
+
+
 static const Rule rules[] = {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
+	 *	set w, h = 0 if want the default size of the application
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+
+	/* class     	 instance        title       tags mask              
+	 * isfloating    istogglealbe    monitor     x   y   w   h              arg (cmd) */ 
+	{ "st",    		 NULL,          "instabox",  1 << (LENGTH(tags) + 0),
+    	 1,   	        1,    	         -1,     25, 65, 50, 35,            {.v = boxcmd} },
+	{ "firefox",	 NULL, 			NULL,		 1 << (LENGTH(tags) + 1),
+    	 1,   	        1,    	         -1,     0, 10, 40, 80,             {.v = firefoxcmd} },
+	{ "Inkscape", 	 NULL,          NULL,        0,
+            1,           0,              -1,     10, 10, 80, 80,            {.v = NULL} },
 };
 
 /* layout(s) */
@@ -61,6 +74,9 @@ static const char *termcmd[]  = { "st",
 
 static const Key keys[] = {
 	/* modifier                     key        function        argument */
+	{ ControlMask|WindowMask,       XK_BS,	   resizefloatingclient,	 	{.i = 0 } },
+	{ ControlMask|WindowMask,       XK_j,      resizefloatingclient, 		{.i = +5 } },
+	{ ControlMask|WindowMask,       XK_k,      resizefloatingclient, 		{.i = -5 } },
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
Only in .: config.h
Only in .: drw.o
Only in .: dwm
Only in .: dwm-6.4-dynamic_toggle_floating_windows_snap.diff
diff -up ../dwm-6.4/dwm.c ./dwm.c
--- ../dwm-6.4/dwm.c	2022-10-04 10:38:18.000000000 -0700
+++ ./dwm.c	2023-01-29 20:10:02.714430597 -0800
@@ -54,6 +54,8 @@
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
+#define MON_HEIGHT(X)			((X)->showbar ? (X)->mh - bh : (X)->mh)								// Effective height 
+#define MON_Y(X)				((X)->showbar ? ((X)->topbar? (X)->my + bh : (X)->my) : (X)->my) 	// Effective Y 
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
 #define TEXTW(X)                (drw_fontset_getwidth(drw, (X)) + lrpad)
 
@@ -92,7 +94,7 @@ struct Client {
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh, hintsvalid;
 	int bw, oldbw;
 	unsigned int tags;
-	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
+	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, istoggleable;
 	Client *next;
 	Client *snext;
 	Monitor *mon;
@@ -138,7 +140,10 @@ typedef struct {
 	const char *title;
 	unsigned int tags;
 	int isfloating;
+	int istoggleable;
 	int monitor;
+	int x, y, w, h;
+	const Arg arg;
 } Rule;
 
 /* function declarations */
@@ -189,8 +194,10 @@ static void pop(Client *c);
 static void propertynotify(XEvent *e);
 static void quit(const Arg *arg);
 static Monitor *recttomon(int x, int y, int w, int h);
+static void readjustclient(Client *c, int x, int y, int w, int h);
 static void resize(Client *c, int x, int y, int w, int h, int interact);
 static void resizeclient(Client *c, int x, int y, int w, int h);
+static void resizefloatingclient(const Arg *arg);
 static void resizemouse(const Arg *arg);
 static void restack(Monitor *m);
 static void run(void);
@@ -212,6 +219,7 @@ static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
+static void togglefloatwin(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
 static void unfocus(Client *c, int setfocus);
@@ -299,7 +307,16 @@ applyrules(Client *c)
 		&& (!r->instance || strstr(instance, r->instance)))
 		{
 			c->isfloating = r->isfloating;
+			c->istoggleable = r->istoggleable;
 			c->tags |= r->tags;
+
+			/* Set geometry by percentage of screen monitor */
+			c->w = r->w ? r->w * selmon->mw / 100 : c->w;
+			c->h = r->h ? r->h * selmon->mh / 100 : c->h;
+			c->x = selmon->wx + r->x * selmon->mw / 100;
+			c->y = selmon->wy + r->y * selmon->mh / 100 + (r->y? (selmon->showbar ? -bh : 0) : 0);
+			c->mon->tagset[c->mon->seltags] |= c->tags = r->tags;
+
 			for (m = mons; m && m->num != r->monitor; m = m->next);
 			if (m)
 				c->mon = m;
@@ -309,7 +326,9 @@ applyrules(Client *c)
 		XFree(ch.res_class);
 	if (ch.res_name)
 		XFree(ch.res_name);
-	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+
+	if (!c->istoggleable)
+		c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
 }
 
 int
@@ -777,6 +796,7 @@ enternotify(XEvent *e)
 	focus(c);
 }
 
+
 void
 expose(XEvent *e)
 {
@@ -1266,6 +1286,28 @@ recttomon(int x, int y, int w, int h)
 	return r;
 }
 
+void 
+readjustclient(Client *c, int x, int y, int w, int h)
+{
+	if (w + 2*c->bw > selmon->mw)
+		w = selmon->mw - 2*c->bw;
+	if (h + 2*c->bw > MON_HEIGHT(selmon))
+		h = MON_HEIGHT(selmon) - 2*c->bw;
+
+	int x_diff = (x + w + 2*c->bw) - (selmon->mx + selmon->mw);
+	int y_diff = (y + h + 2*c->bw) - (MON_Y(selmon) + MON_HEIGHT(selmon));
+
+	// overflow
+	if ((x_diff + float_snap > 0) || (x_diff > 0))
+		x = selmon->mx + selmon->mw - w - 2*c->bw;
+	if ((y_diff + float_snap > 0) || (y_diff > 0))
+		y = MON_Y(selmon) + MON_HEIGHT(selmon) - h - 2*c->bw;
+
+	x = x < float_snap? 0 : x;
+	y = y < MON_Y(selmon) + float_snap ? MON_Y(selmon) : y;
+	resizeclient(c, x, y, w, h);
+}
+
 void
 resize(Client *c, int x, int y, int w, int h, int interact)
 {
@@ -1289,6 +1331,34 @@ resizeclient(Client *c, int x, int y, in
 }
 
 void
+resizefloatingclient(const Arg *arg)
+{
+	Client *c = selmon->sel;
+	if (!c)
+		return;
+	if (!c->istoggleable)
+		return;
+	if (c->isfullscreen)
+		return;
+	if (c->istoggleable && arg->i == 0)
+	{
+		applyrules(c);
+		resizeclient(c, c->x, c->y, c->w, c->h);
+		return;
+	}
+	int x_inc = arg->i*c->w/100;
+	int y_inc = arg->i*c->h/100;
+
+	int x, y, w, h;
+	x = c->x - x_inc;
+	y = c->y - y_inc;
+	w = c->w + 2*x_inc;
+	h = c->h + 2*y_inc;
+	readjustclient(c, x, y, w, h);
+}
+
+
+void
 resizemouse(const Arg *arg)
 {
 	int ocx, ocy, nw, nh;
@@ -1651,7 +1721,7 @@ spawn(const Arg *arg)
 void
 tag(const Arg *arg)
 {
-	if (selmon->sel && arg->ui & TAGMASK) {
+	if (selmon->sel && !selmon->sel->istoggleable && arg->ui & TAGMASK) {
 		selmon->sel->tags = arg->ui & TAGMASK;
 		focus(NULL);
 		arrange(selmon);
@@ -1703,6 +1773,31 @@ togglebar(const Arg *arg)
 	arrange(selmon);
 }
 
+void 
+togglefloatwin(const Arg *arg)
+{
+	Client *c;
+	const Rule *r = &rules[arg->i];
+	unsigned int found = 0;
+
+	for (c = selmon->clients; c && !(found = c->tags & r->tags); c = c->next);
+
+	if (found) {
+		unsigned int newtagset = selmon->tagset[selmon->seltags] ^ r->tags;
+		if (newtagset) {
+			//applyrules(c);
+			selmon->tagset[selmon->seltags] = newtagset;
+			focus(NULL);
+			arrange(selmon);
+		}
+		if (ISVISIBLE(c)) {
+			focus(c);
+			restack(selmon);
+		}
+	} else
+		spawn(&r->arg);
+}
+
 void
 togglefloating(const Arg *arg)
 {
Only in .: dwm.o
Only in .: .git
Only in ../dwm-6.4: README
Only in .: README.md
Only in .: util.o
