diff ../dwm-6.4/config.def.h ./config.def.h
23a24,28
> /* Toggle-able floating window commands */
> static const char *boxcmd[] = {"st", "-t", "instabox", NULL };
> static const char *firefoxcmd[] = {"firefox", NULL };
> 
> 
27a33
> 	 *	set w, h = 0 if want the default size of the application
29,31c35,43
< 	/* class      instance    title       tags mask     isfloating   monitor */
< 	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
< 	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
---
> 
> 	/* class     	 instance        title       tags mask              
> 	 * isfloating    istogglealbe    monitor     x   y   w   h              arg (cmd) */ 
> 	{ "st",    		 NULL,          "instabox",  1 << (LENGTH(tags) + 0),
>     	 1,   	        1,    	         -1,     25, 65, 50, 35,            {.v = boxcmd} },
> 	{ "firefox",	 NULL, 			NULL,		 1 << (LENGTH(tags) + 1),
>     	 1,   	        1,    	         -1,     0, 10, 40, 80,             {.v = firefoxcmd} },
> 	{ "Inkscape", 	 NULL,          NULL,        0,
>             1,           0,              -1,     10, 10, 80, 80,            {.v = NULL} },
63a76,78
> 	{ ControlMask|WindowMask,       XK_BS,	   resizefloatingclient,	 	{.i = 0 } },
> 	{ ControlMask|WindowMask,       XK_j,      resizefloatingclient, 		{.i = +5 } },
> 	{ ControlMask|WindowMask,       XK_k,      resizefloatingclient, 		{.i = -5 } },
Only in .: config.h
Only in .: drw.o
Only in .: dwm
diff ../dwm-6.4/dwm.c ./dwm.c
95c95
< 	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
---
> 	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen, istoggleable;
140a141
> 	int istoggleable;
141a143,144
> 	int x, y, w, h;
> 	const Arg arg;
191a195
> static void readjustclient(Client *c, int x, int y, int w, int h);
193a198
> static void resizefloatingclient(const Arg *arg);
214a220
> static void togglefloatwin(const Arg *arg);
301a308
> 			c->istoggleable = r->istoggleable;
302a310,317
> 
> 			/* Set geometry by percentage of screen monitor */
> 			c->w = r->w ? r->w * selmon->mw / 100 : c->w;
> 			c->h = r->h ? r->h * selmon->mh / 100 : c->h;
> 			c->x = selmon->wx + r->x * selmon->mw / 100;
> 			c->y = selmon->wy + r->y * selmon->mh / 100 + (r->y? (selmon->showbar ? -bh : 0) : 0);
> 			c->mon->tagset[c->mon->seltags] |= c->tags = r->tags;
> 
312c327,329
< 	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
---
> 
> 	if (!c->istoggleable)
> 		c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
779a797
> 
1268a1287,1311
> void 
> readjustclient(Client *c, int x, int y, int w, int h)
> {
> 	if (w > selmon->mw)
> 		w = selmon->mw;
> 	if (h > selmon->mh)
> 		h = selmon->mh;
> 
> 	int x_diff = (x + w + 2*c->bw) - (selmon->mx + selmon->mw);
> 	int y_diff = (y + h + 2*c->bw) - (selmon->my + selmon->mh);
> 
> 	// overflow
> 	if (x_diff > 0)
> 		x = x - x_diff;
> 	if (y_diff > 0)
> 		y = y - y_diff;
> 	if (x < 0)
> 		x = 0;
> 	if (selmon->showbar)
> 		y = selmon->topbar ? (y < bh ? bh : y) : y;
> 	else 
> 		y = y < 0 ? 0 : y;
> 	resizeclient(c, x, y, w, h);
> }
> 
1291a1335,1362
> resizefloatingclient(const Arg *arg)
> {
> 	Client *c = selmon->sel;
> 	if (!c)
> 		return;
> 	if (!c->istoggleable)
> 		return;
> 	if (c->isfullscreen)
> 		return;
> 	if (c->istoggleable && arg->i == 0)
> 	{
> 		applyrules(c);
> 		resizeclient(c, c->x, c->y, c->w, c->h);
> 		return;
> 	}
> 	int x_inc = arg->i*c->w/100;
> 	int y_inc = arg->i*c->h/100;
> 
> 	int x, y, w, h;
> 	x = c->x - x_inc;
> 	y = c->y - y_inc;
> 	w = c->w + 2*x_inc;
> 	h = c->h + 2*y_inc;
> 	readjustclient(c, x, y, w, h);
> }
> 
> 
> void
1654c1725
< 	if (selmon->sel && arg->ui & TAGMASK) {
---
> 	if (selmon->sel && !selmon->sel->istoggleable && arg->ui & TAGMASK) {
1703a1775,1799
> }
> 
> void 
> togglefloatwin(const Arg *arg)
> {
> 	Client *c;
> 	const Rule *r = &rules[arg->i];
> 	unsigned int found = 0;
> 
> 	for (c = selmon->clients; c && !(found = c->tags & r->tags); c = c->next);
> 
> 	if (found) {
> 		unsigned int newtagset = selmon->tagset[selmon->seltags] ^ r->tags;
> 		if (newtagset) {
> 			//applyrules(c);
> 			selmon->tagset[selmon->seltags] = newtagset;
> 			focus(NULL);
> 			arrange(selmon);
> 		}
> 		if (ISVISIBLE(c)) {
> 			focus(c);
> 			restack(selmon);
> 		}
> 	} else
> 		spawn(&r->arg);
Only in .: dwm-dynamic_toggle_float_windows-6.4.diff
Only in .: dwm.o
Only in .: .git
Only in ../dwm-6.4: README
Only in .: README.md
Only in .: util.o
